diff --git a/configure-cscs.sh b/configure-cscs.sh
new file mode 100755
index 0000000..11f0357
--- /dev/null
+++ b/configure-cscs.sh
@@ -0,0 +1,31 @@
+#!/bin/bash
+
+sed -i s\@'$GCC_PATH'@"$GCC_PATH"@g third_party/gpus/crosstool/CROSSTOOL.tpl
+sed -i s\@'$CRAY_CUDATOOLKIT_DIR'@"$CRAY_CUDATOOLKIT_DIR"@g third_party/gpus/crosstool/CROSSTOOL.tpl
+
+sed -i s\@'$GCC_PATH'@"$GCC_PATH"@g third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl
+sed -i s\@'$CRAY_CUDATOOLKIT_DIR'@"$CRAY_CUDATOOLKIT_DIR"@g third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl
+
+CONF_IN="configure.in"
+
+echo $EBROOTPYTHON"/bin/python" > $CONF_IN
+echo "-march=native" >> $CONF_IN
+echo "n" >> $CONF_IN
+echo "n" >> $CONF_IN
+echo "n" >> $CONF_IN
+echo "n" >> $CONF_IN
+echo $EBROOTPYTHON"/lib/python2.7/site-packages" >> $CONF_IN
+echo "n" >> $CONF_IN
+echo "y" >> $CONF_IN
+echo $GCC_PATH"/bin/gcc" >> $CONF_IN
+echo "8.0" >> $CONF_IN
+echo $CRAY_CUDATOOLKIT_DIR >> $CONF_IN
+echo "5" >> $CONF_IN
+echo $EBROOTCUDNN >> $CONF_IN
+echo "6.0" >> $CONF_IN
+
+cat $CONF_IN
+echo "---"
+./configure < $CONF_IN
+
+exit
diff --git a/tensorflow/core/platform/default/build_config.bzl b/tensorflow/core/platform/default/build_config.bzl
index 48ef8df..be831d5 100644
--- a/tensorflow/core/platform/default/build_config.bzl
+++ b/tensorflow/core/platform/default/build_config.bzl
@@ -8,7 +8,7 @@ load("//tensorflow:tensorflow.bzl", "if_not_mobile")
 WITH_GCP_SUPPORT = False
 WITH_HDFS_SUPPORT = False
 WITH_XLA_SUPPORT = False
-WITH_JEMALLOC = True
+WITH_JEMALLOC = False
 
 # Appends a suffix to a list of deps.
 def tf_deps(deps, suffix):
diff --git a/third_party/gpus/crosstool/CROSSTOOL.tpl b/third_party/gpus/crosstool/CROSSTOOL.tpl
index b77a45c..d1e1456 100644
--- a/third_party/gpus/crosstool/CROSSTOOL.tpl
+++ b/third_party/gpus/crosstool/CROSSTOOL.tpl
@@ -44,7 +44,7 @@ toolchain {
 
   tool_path { name: "ar" path: "/usr/bin/ar" }
   tool_path { name: "compat-ld" path: "/usr/bin/ld" }
-  tool_path { name: "cpp" path: "/usr/bin/cpp" }
+  tool_path { name: "cpp" path: "$GCC_PATH/snos/bin/cpp" }
   tool_path { name: "dwp" path: "/usr/bin/dwp" }
   # As part of the TensorFlow release, we place some cuda-related compilation
   # files in @local_config_cuda//crosstool/clang/bin, and this relative
@@ -59,7 +59,12 @@ toolchain {
   linker_flag: "-B/usr/bin/"
 
 %{gcc_host_compiler_includes}
-  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+  tool_path { name: "gcov" path: "$GCC_PATH/snos/bin/gcov" }
+
+  cxx_builtin_include_directory: "$GCC_PATH/snos/include"
+  cxx_builtin_include_directory: "$GCC_PATH/snos/lib/gcc/x86_64-suse-linux/default/include-fixed/"
+  cxx_builtin_include_directory: "$GCC_PATH/snos/lib/gcc/x86_64-suse-linux/default/include/"
+  cxx_builtin_include_directory: "$CRAY_CUDATOOLKIT_DIR/include/"
 
   # C(++) compiles invoke the compiler (as that is the one knowing where
   # to find libraries), but we provide LD so other rules can invoke the linker.
@@ -119,9 +124,10 @@ toolchain {
   # Gold linker only? Can we enable this by default?
   # linker_flag: "-Wl,--warn-execstack"
   # linker_flag: "-Wl,--detect-odr-violations"
+  linker_flag: "-Wl,-rpath,$GCC_PATH/snos/lib64/"
 
   # Include directory for cuda headers.
-  cxx_builtin_include_directory: "%{cuda_include_path}"
+  #cxx_builtin_include_directory: "%{cuda_include_path}"
 
   compilation_mode_flags {
     mode: DBG
diff --git a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl
index b7d6cc6..8dfb52e 100755
--- a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl
+++ b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl
@@ -46,15 +46,17 @@ import sys
 import pipes
 
 # Template values set by cuda_autoconf.
-CPU_COMPILER = ('%{cpu_compiler}')
-GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')
+CPU_COMPILER = ('$GCC_PATH/snos/bin/gcc')
+GCC_HOST_COMPILER_PATH = ('$GCC_PATH/snos/bin/gcc')
 
 CURRENT_DIR = os.path.dirname(sys.argv[0])
-NVCC_PATH = CURRENT_DIR + '/../../../cuda/bin/nvcc'
-LLVM_HOST_COMPILER_PATH = ('/usr/bin/gcc')
-PREFIX_DIR = os.path.dirname(GCC_HOST_COMPILER_PATH)
+NVCC_PATH = ('$CRAY_CUDATOOLKIT_DIR/bin/nvcc')
+LLVM_HOST_COMPILER_PATH = ('$GCC_PATH/snos/bin/gcc')
+AS_PATH = ('/usr/bin/as')
+PREFIX_DIR = os.path.dirname(AS_PATH)
 NVCC_VERSION = '%{cuda_version}'
 
+
 def Log(s):
   print('gpus/crosstool: {0}'.format(s))
 
@@ -196,7 +198,8 @@ def InvokeNvcc(argv, log=False):
   srcs = ' '.join(src_files)
   out = ' -o ' + out_file[0]
 
-  supported_cuda_compute_capabilities = [ %{cuda_compute_capabilities} ]
+  #supported_cuda_compute_capabilities = [ %{cuda_compute_capabilities} ]
+  supported_cuda_compute_capabilities = ["6.0",]
   nvccopts = '-D_FORCE_INLINES '
   for capability in supported_cuda_compute_capabilities:
     capability = capability.replace('.', '')
@@ -258,3 +261,5 @@ def main():
 
 if __name__ == '__main__':
   sys.exit(main())
+
+  
