# @author: sarafael, mschoengens, victorusu, gppezzi
easyblock = "CmdCp"

name = 'TensorFlow'
version = '2.2.0'

versionsuffix = '-cuda-%(cudaver)s'

homepage = 'https://www.tensorflow.org/'
description = """An open-source software library for Machine Intelligence."""

toolchain = {'name': 'CrayGNU', 'version': '20.08'}

builddependencies = [
    ('Bazel', '2.0.0'),
]

dependencies = [
    ('cray-python', EXTERNAL_MODULE),
    ('cuDNN', '7.6.4', '-cuda-%(cudaver)s', True),
    ('SWIG', '3.0.12', '-python%(pymajver)s'),
    ('NCCL', '2.6.4', '-cuda-%(cudaver)s', True),
    ('protobuf-python', '3.11.0'),
    ('dask', '2.2.0', '-python%(pymajver)s'),
    ('prereq', 'tf-2.2'),
    ('CUDA', '10.1.168', '', True),
]

sources = ['v%(version)s.tar.gz']
source_urls = ['https://github.com/tensorflow/tensorflow/archive/']

patches = [('tensorflow-v%(version)s-cuda%(cudaver)s-cscs.patch'),
           ('configure-cscs-v%(version)s.sh', '%(builddir)s/tensorflow-%(version)s/')]

with_configure = False

_whl_file = 'tensorflow-%(version)s-cp%(pymajver)s%(pyminver)s-cp%(pymajver)s%(pyminver)s-linux_x86_64.whl'

_build_str  = "export TEST_TMPDIR=%(builddir)s/../../../bazelout/"
_build_str += " && rm -rf $TEST_TMPDIR"
_build_str += " && sed -i s\@'$GCC_PATH'@$GCC_PATH@g third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl"
_build_str += " && sed -i s\@'$EBROOTCUDA'@$EBROOTCUDA@g third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl"
_build_str += " && sed -i s\@'3.5,6.0'@6.0@g third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl"
_build_str += " && export PYVER=%(pyver)s && export PYSHORTVER=%(pyshortver)s"
_build_str += " && bash configure-cscs-v%(version)s.sh"
_build_str += " && bazel build --verbose_failures --distinct_host_configuration=false --action_env=PYTHONPATH=$PYTHONPATH"
_build_str += "    --config=v2 --config=cuda --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-msse4.2 --copt=-msse4.1 --cxxopt='-D_GLIBCXX_USE_CXX11_ABI=0'"
_build_str += "    -c opt //tensorflow/tools/pip_package:build_pip_package"
_build_str += " && bazel-bin/tensorflow/tools/pip_package/build_pip_package %(builddir)s"
_build_str += " && pip%(pymajver)s install --no-deps --prefix  %(builddir)s %(builddir)s/" + _whl_file
_build_str += " && rm -rf $TEST_TMPDIR"

cmds_map = [
    ('v%(version)s.tar.gz', _build_str),
]

files_to_copy = [
    (['%(builddir)s/' + _whl_file], '%(installdir)s'),
    (['%(builddir)s/bin'], '%(installdir)s'),
    (['%(builddir)s/lib'], '%(installdir)s'),
]

exts_defaultclass = 'PythonPackage'
exts_default_options = {
    'req_py_majver': '%(pymajver)s',
    'req_py_minver': '%(pyminver)s',
    'source_urls': [PYPI_SOURCE]
}

exts_list = [
    ('tensorflow-estimator', version, {
        'source_tmpl': 'tensorflow_estimator-%(version)s-py2.py3-none-any.whl',
        'modulename': 'tensorflow_estimator',
        'unpack_sources': False,
        'use_pip' : True,
    }),
    ('grpcio', '1.24.0', {
        'modulename': 'grpc',
    }),
    ('tensorboard', '2.2.1', {
        'source_tmpl': 'tensorboard-%(version)s-py3-none-any.whl',
        'unpack_sources': False,
        'use_pip' : True,
    }),
]

sanity_check_paths = {
    'files': [_whl_file],
    'dirs': ['lib/python%(pyshortver)s/site-packages'],
}

modextrapaths = {
    'PYTHONPATH': 'lib/python%(pyshortver)s/site-packages',
}

moduleclass = 'devel'
