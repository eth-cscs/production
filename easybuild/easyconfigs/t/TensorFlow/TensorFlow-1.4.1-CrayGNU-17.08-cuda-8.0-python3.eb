# @author: mschoengens, victorusu, gppezzi

easyblock = "CmdCp"

name = 'TensorFlow'
version = '1.4.1'

py_maj_ver = '3'
py_min_ver = '6'
py_rev_ver = '1.1'

cudaver = '8.0'

ver_suffix_cuda = '-cuda-%s' % (cudaver)
ver_suffix_py = '-python%s' % (py_maj_ver)
ver_long_suffix_py = '-python%s.%s' % (py_maj_ver, py_min_ver)
versionsuffix = '%s%s' % (ver_suffix_cuda, ver_suffix_py)

installdir = '%(installdir)s'
builddir = '%(builddir)s'

homepage = 'https://www.tensorflow.org/'
description = """An open-source software library for Machine Intelligence."""

toolchain = {'name': 'CrayGNU', 'version': '17.08'}

builddependencies = [
    ('wheel', '0.30.0a0', ver_long_suffix_py),
    ('Bazel', '0.9.0', ver_long_suffix_py),
]

dependencies = [
    ('cray-python/%s.%s.%s' % (py_maj_ver, py_min_ver, py_rev_ver), EXTERNAL_MODULE),
    ('cuDNN', '7.0', '-cuda-%s' % cudaver, True),
    ('SWIG', '3.0.10', ver_long_suffix_py),
    ('protobuf', '3.3.0', ver_long_suffix_py),
    ('backports.weakref', '1.0rc1', ver_long_suffix_py),
    ('Werkzeug', '0.12.2', ver_long_suffix_py),
]

sources = ['v%(version)s.tar.gz']
source_urls = ['https://github.com/tensorflow/tensorflow/archive/']

patches = [('tensorflow-v%s-cuda-python%s-cscs.patch' % (version, py_maj_ver))]

with_configure = False

whl_file = 'tensorflow-%s-cp%s%s-cp%s%sm-linux_x86_64.whl' % (version, py_maj_ver, py_min_ver, py_maj_ver, py_min_ver)

build_str  = "export TEST_TMPDIR=/dev/shm/$USER/bazelout/ && "
build_str += "export PYMAJVER=%s && export PYMINVER=%s && " % (py_maj_ver, py_min_ver) # required for configure-cscs scripts
build_str += "chmod +x configure-cscs.sh && "
build_str += "./configure-cscs.sh && "
build_str += "bazel build --config=cuda --verbose_failures --incompatible_load_argument_is_label=false --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-msse4.2 --copt=-msse4.1 --cxxopt='-D_GLIBCXX_USE_CXX11_ABI=0'"
build_str += " -c opt //tensorflow/tools/pip_package:build_pip_package && "
build_str += "bazel-bin/tensorflow/tools/pip_package/build_pip_package %(builddir)s &&"
build_str += "pip%s install --no-deps --prefix  %s %s/" % (py_maj_ver, builddir, builddir) + whl_file


cmds_map = [
    ('v%(version)s.tar.gz', build_str),
]

files_to_copy = [
              (['%(builddir)s/' +  whl_file], '%(installdir)s'),
	      (['%(builddir)s/bin'], '%(installdir)s'),
	      (['%(builddir)s/lib'], '%(installdir)s'),
]

sanity_check_paths={
    'files': [whl_file],
    'dirs': ['%s/lib/python%s.%s/site-packages' % (installdir, py_maj_ver, py_min_ver)],
}

postinstallcmds = [ 'rm -rf /dev/shm/$USER/bazelout/' ]

modextrapaths = {
    'PYTHONPATH' : 'lib/python%s.%s/site-packages' % (py_maj_ver, py_min_ver),
}

moduleclass = 'devel'

