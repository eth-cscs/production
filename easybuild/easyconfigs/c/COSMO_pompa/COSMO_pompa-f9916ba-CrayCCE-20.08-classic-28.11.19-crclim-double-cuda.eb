# kraushm, omlins (CSCS)
easyblock = 'MakeCp'

name = 'COSMO_pompa'
version = 'f9916ba'
versionsuffix = '-28.11.19-crclim-double-cuda'

homepage = "https://github.com/C2SM-RCM/cosmo-pompa/tree/master/dycore (-b crclim)"
description = """
Performance On Massively Parallel Architectures: It is the goal of this project 
to prepare the COSMO model code for these emerging massively parallel systems.

see: http://www2.cosmo-model.org/content/tasks/priorityProjects/pompa/default.htm
"""

toolchain = {'name': 'CrayCCE', 'version': '20.08'}
toolchainopts = {'verbose': False}

# c2sm repository is private and there is no official release
sources = ['/apps/common/UES/easybuild/sources/%(nameletterlower)s/%(name)s/%(namelower)s_%(version)s.tar.gz']
patches = ['patch_COSMO_%(version)s_daint_cray_gpu_CrayCCE-%(toolchain_version)s.patch']

builddependencies = [
    ('CMake', '3.12.0', '', True),
    ('libgrib1_crclim', 'a1e4271'),
    ('Dycore', '551f6b4', '-crclim-double-cuda', ('CrayGNU','20.08'))
]
dependencies = [
    ('cray-netcdf', EXTERNAL_MODULE),
    ('grib_api', '1.13.1'),
    ('craype-accel-nvidia60', EXTERNAL_MODULE),
]

prebuildopts = """cd %(builddir)s/%(namelower)s/cosmo && module switch PrgEnv-gnu PrgEnv-cray && export EBROOTNETCDF=$NETCDF_DIR && export EBROOTNETCDFMINFORTRAN=$NETCDF_DIR && export LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed 's/netcdf\/4.7.4.0\/GNU\/8.2/netcdf\/4.7.4.0\/CRAYCLANG\/9.0/g') && export LDFLAGS=$(echo $LDFLAGS | sed 's/netcdf\/4.7.4.0\/GNU\/8.2/netcdf\/4.7.4.0\/CRAYCLANG\/9.0/g') && export CPPFLAGS=$(echo $CPPFLAGS | sed 's/netcdf\/4.7.4.0\/GNU\/8.2/netcdf\/4.7.4.0\/CRAYCLANG\/9.0/g') && export EBVARLDFLAGS=$(echo $EBVARLDFLAGS | sed 's/netcdf\/4.7.4.0\/GNU\/8.2/netcdf\/4.7.4.0\/CRAYCLANG\/9.0/g') && export EBVARCPPFLAGS=$(echo $EBVARCPPFLAGS | sed 's/netcdf\/4.7.4.0\/GNU\/8.2/netcdf\/4.7.4.0\/CRAYCLANG\/9.0/g') && """
prebuildopts += " module unload cray-mpich && "
buildopts = "ACCGPU=1 CPP_DYCORE=1 paropt "

parallel = 6

modtclfooter = """
prepend-path PATH %(installdir)s
"""
postinstallcmds = ['cd %(installdir)s; ln -s cosmo cosmo_gpu_crclim']
files_to_copy = [(['cosmo/cosmo'], '.')]

sanity_check_paths = {
    'files': ['cosmo', 'cosmo_gpu_crclim'],
    'dirs': [],
}

moduleclass = 'geo'
