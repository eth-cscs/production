diff -Naur bladeplugin-0.1.ori/configure bladeplugin-0.1/configure
--- bladeplugin-0.1.ori/configure	2018-05-08 15:43:12.000000000 +0200
+++ bladeplugin-0.1/configure	2019-08-24 17:35:48.090831020 +0200
@@ -18730,6 +18730,7 @@
   { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: failed to fix the Makefiles generated by $QMAKE" >&5
 $as_echo "$as_me: WARNING: failed to fix the Makefiles generated by $QMAKE" >&2;}
   rm -f fixmk.pl
+  sed -i "s@-lQt5PrintSupport@-lQt5PrintSupport -lGLdispatch@" Makefile*
 
   # Try to compile a simple Qt app.
   { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we can build a simple Qt app" >&5
diff -Naur bladeplugin-0.1.ori/src/tracelib/TraceEvent.cpp bladeplugin-0.1/src/tracelib/TraceEvent.cpp
--- bladeplugin-0.1.ori/src/tracelib/TraceEvent.cpp	2018-05-08 15:43:00.000000000 +0200
+++ bladeplugin-0.1/src/tracelib/TraceEvent.cpp	2019-08-24 17:32:26.262497000 +0200
@@ -198,14 +198,14 @@
 {
     for (int i=0; i<level; i++)
         std::cout << "  ";
-    std::cout << " s " << start_timestamp << std::endl;
+    std::cout << get_region_name() << " s " << start_timestamp << std::endl;
     for (std::vector<TraceEvent*>::iterator iter = sub_calls.begin(); iter != sub_calls.end(); ++iter)
     {
         (*iter)->print( level + 1 );
     }
     for (int i=0; i<level; i++)
         std::cout << "  ";
-    std::cout << " f " << end_timestamp << std::endl;
+    std::cout << get_region_name() << " f " << end_timestamp << std::endl;
 }
     
 std::pair< TraceEventPoint, TraceEventPoint> 
diff -Naur bladeplugin-0.1.ori/src/tracelib/TraceLoader.cpp bladeplugin-0.1/src/tracelib/TraceLoader.cpp
--- bladeplugin-0.1.ori/src/tracelib/TraceLoader.cpp	2018-05-08 15:43:00.000000000 +0200
+++ bladeplugin-0.1/src/tracelib/TraceLoader.cpp	2019-08-24 17:32:26.260941021 +0200
@@ -1,7 +1,7 @@
 /****************************************************************************
 **  CUBE        http://www.scalasca.org/                                   **
 *****************************************************************************
-**  Copyright (c) 2015-2016                                                **
+**  Copyright (c) 2015-2019                                                **
 **  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
 **                                                                         **
 **  This software may be modified and distributed under the terms of       **
@@ -372,6 +372,82 @@
 
 
 
+static OTF2_CallbackCode
+TraceLoader_ProgramBegin(   OTF2_LocationRef 	location,
+                            OTF2_TimeStamp 	time,
+                            void*  userData, 
+                            OTF2_AttributeList *attributeList, 
+                            OTF2_StringRef programName, 
+                            uint32_t numberOfArguments, 
+                            const OTF2_StringRef *programArguments )
+{
+    global_trace_loader->last_read_timestamp = time;
+
+       
+    if ( global_trace_loader->calls.find(location) ==  global_trace_loader->calls.end())
+    {
+         global_trace_loader->calls[location].push( new TraceEvent(  location )); // add an _root element
+    }
+  
+    std::string& name = global_trace_loader->string_defs[programName];   
+    std::string::size_type found = name.rfind("/");
+    std::string region_name = "";
+    if (found!=std::string::npos)
+       region_name = name.substr(++found);
+    uint64_t region = OTF2_UNDEFINED_REGION;
+    for ( std::vector<RegionClass>::const_iterator riter = global_trace_loader->regions.begin(); riter != global_trace_loader->regions.end(); ++riter,++region)
+    {
+        region= (region == OTF2_UNDEFINED_REGION)?0:region;
+        if (riter->name.compare( region_name) == 0)
+            break;
+    }
+    TraceEvent * _event = TraceLoader::createTraceEvent(OTF2_UNDEFINED_REGION, location ) ;
+    
+    _event->set_start( time - global_trace_loader->global_offset  );
+    _event->set_region( region );
+    _event->set_paradigm( global_trace_loader->regions[ region].paradigm);
+    _event->set_region_role(global_trace_loader->regions[ region].regionRole );
+    _event->set_level( global_trace_loader->calls[location].size() );
+
+    TraceEvent * caller =global_trace_loader->calls[location].top();
+    _event->set_parent( caller );
+    global_trace_loader->max_levels[location] = std::max(global_trace_loader->max_levels[location], _event->get_level() );
+    uint32_t parent_callpath = (_event->get_parent() != NULL)? _event->get_parent()->get_callpath():OTF2_UNDEFINED_CALLPATH;
+    uint32_t current_callpath = find_callpath( caller, parent_callpath, region);
+
+    _event->set_callpath( current_callpath );
+    _event->set_cube_callpath( bladeservices::get_cube_callpath( current_callpath, global_trace_loader->cube ));
+    _event->set_cube_location( bladeservices::get_cube_location( location,  global_trace_loader->cube ));
+
+    global_trace_loader->current_metric_values.clear();
+    
+    global_trace_loader->calls[location].push( _event);
+    return OTF2_CALLBACK_SUCCESS;
+}
+
+static OTF2_CallbackCode
+TraceLoader_ProgramEnd( OTF2_LocationRef 	location,
+                        OTF2_TimeStamp 	time,
+                        void *userData, 
+                        OTF2_AttributeList *attributeList, 
+                        int64_t exitStatus)
+{
+    TraceEvent * _event = global_trace_loader->calls[location].top();
+    global_trace_loader->calls[location].pop();
+    
+    if (_event == global_trace_loader->dummy_event)
+        return OTF2_CALLBACK_SUCCESS;
+    
+    _event->set_end( time - global_trace_loader->global_offset  );
+    global_trace_loader->last_read_timestamp = time;
+    return OTF2_CALLBACK_SUCCESS;
+}
+
+
+
+
+
+
 
 static OTF2_CallbackCode
 TraceLoader_Enter(  OTF2_LocationRef    location,
@@ -839,57 +915,59 @@
 TraceEvent * 
 TraceLoader::createTraceEvent(uint64_t region,  uint64_t location)
 {
-    if (
-        (global_trace_loader->regions[ region].name.compare("MPI_Send")==0) || 
-         (global_trace_loader->regions[ region].name.compare("MPI_Ssend")==0)|| 
-         (global_trace_loader->regions[ region].name.compare("MPI_Rsend")==0)
-        )
-    {
-        return  new SendP2PTraceEvent(  location);
-    }
-    else if  (global_trace_loader->regions[ region].name.compare("MPI_Recv")==0)
-    {
-        return new RecvP2PTraceEvent(  location);
-    }    
-    else if ( (global_trace_loader->regions[ region].name.compare("MPI_Isend")==0) || 
-              (global_trace_loader->regions[ region].name.compare("MPI_Issend")==0)|| 
-              (global_trace_loader->regions[ region].name.compare("MPI_Irsend")==0)
-            )
-    {
-        return  new ISendP2PTraceEvent(  location);
-    }
-    else if  (global_trace_loader->regions[ region].name.compare("MPI_Irecv")==0)
-    {
-        return new IRecvP2PTraceEvent(  location);
-    }
-    else if (global_trace_loader->regions[ region].name.compare("MPI_Bcast")==0)
-    {
-        return new BcastTraceEvent(  location);
-    }
-    else if  (global_trace_loader->regions[ region].name.compare("MPI_Reduce")==0)
-    {
-        return new ReduceTraceEvent(  location);
-    }
-    else  if (global_trace_loader->regions[ region].name.compare("MPI_Scan")==0)
-    {
-        return new ScanTraceEvent(  location);
-    }
-    else if  (global_trace_loader->regions[ region].name.compare("MPI_Gather")==0)
-    {
-        return new GatherTraceEvent(  location);
-    }
-    else if  (global_trace_loader->regions[ region].name.compare("MPI_Wait")==0)
-    {
-        return new WaitTraceEvent(  location);
-    }
-    else if  (global_trace_loader->regions[ region].name.compare("MPI_Waitall")==0)
-    {
-        return new WaitallTraceEvent(  location);
-    }
-    else
+    if (region != OTF2_UNDEFINED_REGION)
     {
-        return new TraceEvent(  location );
+        if (
+            (global_trace_loader->regions[ region].name.compare("MPI_Send")==0) || 
+            (global_trace_loader->regions[ region].name.compare("MPI_Ssend")==0)|| 
+            (global_trace_loader->regions[ region].name.compare("MPI_Rsend")==0)
+            )
+        {
+            return  new SendP2PTraceEvent(  location);
+        }
+        else if  (global_trace_loader->regions[ region].name.compare("MPI_Recv")==0)
+        {
+            return new RecvP2PTraceEvent(  location);
+        }    
+        else if ( (global_trace_loader->regions[ region].name.compare("MPI_Isend")==0) || 
+                (global_trace_loader->regions[ region].name.compare("MPI_Issend")==0)|| 
+                (global_trace_loader->regions[ region].name.compare("MPI_Irsend")==0)
+                )
+        {
+            return  new ISendP2PTraceEvent(  location);
+        }
+        else if  (global_trace_loader->regions[ region].name.compare("MPI_Irecv")==0)
+        {
+            return new IRecvP2PTraceEvent(  location);
+        }
+        else if (global_trace_loader->regions[ region].name.compare("MPI_Bcast")==0)
+        {
+            return new BcastTraceEvent(  location);
+        }
+        else if  (global_trace_loader->regions[ region].name.compare("MPI_Reduce")==0)
+        {
+            return new ReduceTraceEvent(  location);
+        }
+        else  if (global_trace_loader->regions[ region].name.compare("MPI_Scan")==0)
+        {
+            return new ScanTraceEvent(  location);
+        }
+        else if  (global_trace_loader->regions[ region].name.compare("MPI_Gather")==0)
+        {
+            return new GatherTraceEvent(  location);
+        }
+        else if  (global_trace_loader->regions[ region].name.compare("MPI_Wait")==0)
+        {
+            return new WaitTraceEvent(  location);
+        }
+        else if  (global_trace_loader->regions[ region].name.compare("MPI_Waitall")==0)
+        {
+            return new WaitallTraceEvent(  location);
+        }
     }
+    
+    // i case of doublt -> create general trace
+    return new TraceEvent( location );
 }
 
 
@@ -1064,6 +1142,12 @@
     progress_step =  bladeservices::TraceReading;
     global_evt_reader = OTF2_Reader_GetGlobalEvtReader( reader );
     event_callbacks = OTF2_GlobalEvtReaderCallbacks_New();
+    
+    OTF2_GlobalEvtReaderCallbacks_SetProgramBeginCallback ( event_callbacks,
+                                                            &TraceLoader_ProgramBegin ); 	
+    OTF2_GlobalEvtReaderCallbacks_SetProgramEndCallback ( event_callbacks,
+                                                            &TraceLoader_ProgramEnd ); 	
+    
     OTF2_GlobalEvtReaderCallbacks_SetEnterCallback( event_callbacks,
                                                     &TraceLoader_Enter );
     OTF2_GlobalEvtReaderCallbacks_SetLeaveCallback( event_callbacks,
