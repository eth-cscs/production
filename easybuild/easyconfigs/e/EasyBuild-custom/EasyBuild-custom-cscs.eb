# contributed by Victor Holanda Rusu, Luca Marsella and Guilherme Peretti Pezzi (CSCS)
easyblock = 'Bundle'

name = 'EasyBuild-custom'
version = 'cscs'

homepage = 'https://github.com/eth-cscs/production/wiki/User-instructions-for-EasyBuild'
description = """Production EasyBuild @ CSCS """

toolchain = {'name': 'dummy', 'version': 'dummy'}

modtclfooter = """
###############################
# SYSTEM INDEPENDENT SETTINGS #
###############################

# Local variables
set ebmodule               /apps/common/UES/easybuild/software/EasyBuild/latest
set eb_config_dir          /apps/daint/UES/jenkins/production/easybuild

#
# EB_CUSTOM_REPOSITORY
# the following variables should depend on it
#
# XDG_CONFIG_HOME
# EASYBUILD_ROBOT_PATHS
# EASYBUILD_INCLUDE_EASYBLOCKS
# EASYBUILD_EXTERNAL_MODULES_METADATA (if on cray)
#
if { ! [ info exists ::env(EB_CUSTOM_REPOSITORY) ] } {
    setenv EB_CUSTOM_REPOSITORY $eb_config_dir
}
setenv XDG_CONFIG_DIRS                          $::env(EB_CUSTOM_REPOSITORY)
setenv EASYBUILD_ROBOT_PATHS                    $::env(EB_CUSTOM_REPOSITORY)/easyconfigs/:
setenv EASYBUILD_INCLUDE_EASYBLOCKS             $::env(EB_CUSTOM_REPOSITORY)/easyblocks/*.py
setenv EASYBUILD_EXTERNAL_MODULES_METADATA      $::env(EB_CUSTOM_REPOSITORY)/cray_external_modules_metadata.cfg

# Checking if we have the command modulecmd
# If so, then module is a c version
# if not then module is a tcl version
set status [catch {exec which modulecmd} [list result]]
if { $status == 0 } {
    setenv EASYBUILD_MODULES_TOOL               EnvironmentModulesC
} else {
    setenv EASYBUILD_MODULES_TOOL               EnvironmentModulesTcl
    if { [ file readable "/usr/share/Modules/tcl" ] } {
        prepend-path PATH                       /usr/share/Modules/tcl
    }
}

#############################
# SYSTEM DEPENDENT SETTINGS #
#############################

# hostname
set host_machine [regsub -all {[0-9]} $::env(HOSTNAME) ""]
# removing any possible '-' at the end of the $host_machine
set host_machine [regsub -all {[-]$} $host_machine ""]
# Specific cray configurations
if { [ info exists ::env(CRAYPE_NETWORK_TARGET) ] } {
    setenv EASYBUILD_OPTARCH                    $::env(CRAY_CPU_TARGET)

    setenv EASYBUILD_RECURSIVE_MODULE_UNLOAD    0
} else {
    setenv EASYBUILD_RECURSIVE_MODULE_UNLOAD    1
}

#
# EASYBUILD_PREFIX
# the following variables should depend on it
#
# EASYBUILD_INSTALLPATH
#
if { ! [ info exists ::env(EASYBUILD_PREFIX) ] } {
    # cray systems directory change
    if { [ info exists ::env(CRAYPE_NETWORK_TARGET) ] } {
        setenv EASYBUILD_PREFIX                 $::env(HOME)/easybuild/$host_machine/$::env(CRAY_CPU_TARGET)
    } else {
        setenv EASYBUILD_PREFIX                 $::env(HOME)/easybuild/$host_machine
    }
} else {
    setenv EASYBUILD_PREFIX                     $::env(EASYBUILD_PREFIX)
}
setenv EASYBUILD_INSTALLPATH                    $::env(EASYBUILD_PREFIX)

#
#
# These variables are set to /dev/shm/$USER/easbuild/stage
#
# EASYBUILD_BUILDPATH
# EASYBUILD_TMPDIR
#
setenv EASYBUILD_TMPDIR                         /dev/shm/$::env(USER)/easybuild/stage/tmp
setenv EASYBUILD_BUILDPATH                      /dev/shm/$::env(USER)/easybuild/stage/build

###############
# FINAL TOUCH #
###############

#
# the following variables should depend on $HOME
#
# EASYBUILD_SOURCEPATH
#
if { [ file writable "/apps/common/easybuild/sources" ] } {
    setenv EASYBUILD_SOURCEPATH                 /apps/common/easybuild/sources
} else {
    setenv EASYBUILD_SOURCEPATH                 $::env(HOME)/sources
}

# Adding easybuild installed softwares to the list of modules
prepend-path MODULEPATH                         $::env(EASYBUILD_INSTALLPATH)/modules/all

# Loading easybuild module
module load /apps/common/UES/easybuild/modules/all/EasyBuild/latest
"""

moduleclass = 'devel'
