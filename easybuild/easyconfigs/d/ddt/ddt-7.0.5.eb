easyblock = 'Bundle'

name = 'ddt'
version = '7.0.5'

homepage = 'https://www.allinea.com/products/forge/download'
description = """Allinea DDT: The debugger for C, C++, Fortran threaded and parallel codes"""

toolchain = {'name': 'dummy', 'version': 'dummy'}

modtclfooter = """
# This module cannot be loaded if another modulefile was previously loaded

conflict darshan
conflict Cube

# =============================================================================
# Which os/system is it ?
# =============================================================================
set OS_ID "generic"
set VERSION_ID "NULL"
set VERSION_ID_MAJOR "NULL"

if { [ file exist /etc/os-release ] } {

    set fsize [file size /etc/os-release ]
    set fp [open /etc/os-release r]
    set OS_INFO [read $fp $fsize]

    foreach i $OS_INFO {
        set key [ lindex [ split $i '=' ]  0 ]
        set value [ lindex [ split $i '=' ]  1 ]
        # puts stderr "i=$i : $key === $value"

        if { $key == "ID" } {
            set OS_ID [ string trim $value '"' ]
        }

        if { $key == "VERSION_ID" } {
            set VERSION_ID [ string trim $value '"' ]
            set VERSION_ID_MAJOR [ lindex [ split $VERSION_ID '.' ]  0 ]
        }

    }
}

#puts stderr "OS_ID=${OS_ID}"
#puts stderr "VERSION_ID=$VERSION_ID"
#puts stderr "VERSION_ID_MAJOR=$VERSION_ID_MAJOR"

if { ${OS_ID}=="sles" } {
    set ost "SLES"
    if { ${VERSION_ID_MAJOR}=="12" } {
        set osv "12"
    } else {
        set osv "11"
    }
}

if { ${OS_ID}=="rhel" } {
    set ost "RHAT"
    if { ${VERSION_ID_MAJOR}=="7" } {
        set osv "7"
    } else {
        set osv "6"
    }
}

if { ${OS_ID}=="generic" } {
    set ost "RHAT"
    set osv "6"
}

set     url          "http://www.allinea.com"
set     url2         "http://user.cscs.ch"
set     modulename   "ddt"
set     version      "7.0.5"
set     packageroot  "/apps/common/UES/${ost}${osv}/${modulename}/${version}"

# ============================================================================
#if { [ module-info mode load ] } {

        setenv          DDT_DIR               "$packageroot"
        prepend-path    PATH                  "$packageroot/bin"
        prepend-path    PATH                  "$packageroot/libexec"
        prepend-path    LD_LIBRARY_PATH       "$packageroot/lib"
        prepend-path    LD_LIBRARY_PATH       "$packageroot/lib/64"
        prepend-path    MANPATH               "$packageroot/man"
        setenv          DDT_MEM               "-L$packageroot/lib/64"
        setenv          CRAY_ACC_NO_EARLY_INIT "1"
        append-path     PE_PRODUCT_LIST       "DDT"
        setenv          DDT_LICENCE_FILE      "/apps/common/UES/licensesCSCS/ddt/Licence"
        setenv          DDT_LICENSE_FILE      "/apps/common/UES/licensesCSCS/ddt/Licence"
        #setenv          DDT_LICENCE_FILE      "$packageroot/licenses/Licence"
        #setenv          DDT_LICENSE_FILE      "$packageroot/licenses/Licence"
        #setenv          DDT_LICENCE_FILE      "$packageroot/../licenses/Licence"
        #setenv          DDT_LICENSE_FILE      "$packageroot/../licenses/Licence"

#}

# ============================================================================
# Help message called by : module help ...
# ============================================================================
#if { [ module-info mode help ] } {
proc ModulesHelp {} {
  global url url2 flags modulename version packageroot
  puts stderr "
        \tmodulefile : [module-info name] [module-info mode]
        \t$modulename Version $version :
        \tCSCS Users Documentation : $url
        \tYoutube channel: https://www.youtube.com/playlist?list=PL1tk5lGm7zvR1CPR9KYZZEyRlCYQYY-Xp
        \t$url2

        \tSee : $packageroot
        \t \033\[01;32m ${packageroot}/doc/ \033\[0m

        \tLicensing : \033\[01;32m http://velan:4241/status.html\033\[0m
        \tUsage :
        \t module load $modulename will automatically set the PATH to the $modulename executable
        \t \033\[01;31mddt --connect\033\[0m srun ... &

        \t \033\[01;32mCUDA debugging\033\[0m
        \t Non-MPI codes may need to add a dummy MPI_Init() call
        \t Multiple contexts support through CUDA proxy : export CRAY_CUDA_MPS=0"

       
  return 0
}
#}

# ============================================================================
# Short help message called by : module whatis ...
# ============================================================================
if { [ module-info mode whatis ] } {
module-whatis "Set environment variables to enable the usage of the $modulename $version debugger."
}

# ============================================================================
# Help message called by : module display ...
# ============================================================================
# module display "[module-info name]"
"""

moduleclass = 'devel'

