#!/usr/bin/env groovy

def methods
def machinesList
/*
 Initialization: checkout the production repository to load the files:
 - "util.groovy" with the functions used in the pipeline scripts
 - "Machines.groovy" with the list and properties of HPC systems
*/
stage('Initialization') {
    node('master') {
        checkout scm
        methods = load("$WORKSPACE/jenkins/util.groovy")
        machinesList = load("$WORKSPACE/jenkins/Machines.groovy")
    }
}

/*
 Machine Selection:
 - filters the user defined parameter "machines", accessible though "params.machines"
 - defines the runtime HPC systems of the project "machinesToRun"
 - defines the configuration of the runtime HPC systems "machinesConfiguration"
*/
def machineConfigurations = []
stage('Machine Selection') {
    node('master') {
        def machinesToRun = machinesList.findAll({methods.machineCheck(params.machines, it.name)})
        if (!machinesToRun) {
            println "No machines were specified. Aborting...."
            currentBuild.result = "FAILURE"
            return
        }
        for (system in machinesToRun) {
            machineConfigurations.add(
                [machine:system, architectures: methods.getMachineConfiguration(
                        params.machines, system.name, system.archs as String[])])
        }
    }
}

/*
 Update Stage: configures parallel builds for the different "machinesToRun"
 Loop over all systems in "machineConfigurations":
  - if the machine has multiple architectures, starts a sub-loop over architectures
  - the user parameter "eb_prefix" is prepended to the variable EASYBUILD_PREFIX
  - EBVERSIONEASYBUILD stores the version of EasyBuild ("params.eb_version")
  - the target Cray PE version is selected by the user and stored in "params.pe_target"
*/
def updates = [:]
def licensed_software = "CPMD IDL MATLAB VASP"

stage('Update Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def machineName = machine.name
        for (item in architectures) {
            /* define architecture and machineLabel
               to use them in parallel builds */
            def architecture = item
            def machineLabel = architecture == "" ?
               machineName :
               "$machineName-$architecture"
            updates["$machineLabel"] = {
                node(machineName) {
                    checkout scm

                    /* define list of unuse paths */
                    def unuse_paths = architecture == '' ?
                        machine.unusePath.replace(':', ' ') :
                        machine.unusePath.replace(':', ' ').replace('ARCH', architecture)
                        println("List of unuse paths: $unuse_paths")

                    /* 
                       define machine dependent commands and environment variables:
                       - eb_flags: EasyBuild flags
                       - eb_tcflags: EasyBuild toolchain flags
                       - eb_installpath: EasyBuild installpath
                       - eb_modulespath: EasyBuild modules path 
                       - eb_toolspath: tools modules path 
                       - load_pe: command to load PE target module 
                       - toolchains: toolchain names 
                    */
                    def eb_flags
                    def eb_tcflags
                    def eb_installpath
                    def eb_modulespath
                    def load_pe
                    def toolchains
                    if(machineName == "daint" || machineName == "dom"){
                        eb_flags = "--ignore-locks --modules-header=$WORKSPACE/login/daint-${architecture}.h --modules-footer=$WORKSPACE/login/daint.footer -r"
                        eb_tcflags = "--hidden"
                        eb_installpath = "${params.eb_prefix}/${params.pe_target}/$machineLabel"
                        eb_metadata="$WORKSPACE/easybuild/cray_external_modules_metadata-${pe_target}.cfg"
                        eb_modulespath = "${eb_installpath}/modules/all"
                        eb_toolspath = "${eb_installpath}/tools/modules/all"
                        load_pe = architecture == "" ?
                            "module load cdt-cuda/${pe_target} && module list" :
                            "module load cdt-cuda/${pe_target} daint-$architecture && module list"
                        toolchains = "CrayCCE CrayGNU CrayIntel"
                    } else if(machineName == "eiger" || machineName == "pilatus"){
                        eb_flags = "--ignore-locks -r"
                        eb_tcflags = ""
                        eb_installpath = "${params.eb_prefix}/"
                        eb_metadata="$WORKSPACE/easybuild/cpe_external_modules_metadata-${pe_target}.cfg"
                        eb_modulespath = "${eb_installpath}/modules/all/Core"
                        eb_toolspath = "${eb_installpath}/modules/all/Core"
                        load_pe = "module load cpe/${pe_target} && module list"
                        toolchains = "cpeAMD cpeCray cpeGNU cpeIntel"
                    }

                    /* define command to load EasyBuild */
                    def load_easybuild = params.eb_version == "" ?
                        "module load EasyBuild-custom/cscs" :
                        "module load EasyBuild-custom/cscs && module switch EasyBuild EasyBuild/${params.eb_version}"

                    /* define build command and PE target flags (pe_flags) */
                    def build_command = "eb $eb_flags"
                    def pe_flags = "--try-toolchain-version=${params.pe_target}"
                        
                    /* create the new toolchains and update the software stack */
                    withEnv(["EASYBUILD_PREFIX=${eb_installpath}",
                             "EASYBUILD_TMPDIR=${eb_installpath}/tmp",
                             "EB_CUSTOM_REPOSITORY=$WORKSPACE/easybuild"]){
                                 sh("""#!/bin/bash -l
                                     # create module folders and symbolic link to EasyBuild-custom/cscs
                                     if [ ! -d "${eb_modulespath}" ]; then
                                         mkdir -p ${eb_modulespath} ${eb_toolspath}
                                         pushd ${eb_modulespath}
                                         ln -s /apps/common/UES/jenkins/production/easybuild/module/EasyBuild-custom
                                         popd
                                     elif [ ! -L "${eb_modulespath}/EasyBuild-custom" ]; then
                                         pushd ${eb_modulespath}
                                         ln -s /apps/common/UES/jenkins/production/easybuild/module/EasyBuild-custom
                                         popd
                                     fi

                                     # load Cray PE module and EasyBuild
                                     $load_pe
                                     $load_easybuild

                                     # update buildpath and metadata file for external modules
                                     export EASYBUILD_BUILDPATH="/dev/shm/\$USER/$machineLabel"
                                     export EASYBUILD_EXTERNAL_MODULES_METADATA="$eb_metadata"

                                     # unuse paths
                                     for path in $unuse_paths; do
                                         module unuse \$path
                                     done
                                     echo -e "\nMODULEPATH: \$MODULEPATH\n"

                                     # print EasyBuild version and configuration
                                     eb --version
                                     eb --show-config

                                     # create the new toolchains
                                     for tc in $toolchains; do
                                         echo -e "\nCurrent toolchain: \$tc"
                                         find \$EB_CUSTOM_REPOSITORY -type f -name \${tc}-${params.pe_current}.eb -exec sed "s/${params.pe_current}/${params.pe_target}/" {} \\; > \$EB_CUSTOM_REPOSITORY/easyconfigs/c/\$tc/\${tc}-${params.pe_target}.eb

                                         # build current toolchain
                                         echo -e "\nBuilding with the following command:"
                                         echo "$build_command $eb_tcflags \${tc}-${params.pe_target}.eb"
                                         $build_command $eb_tcflags \${tc}-${params.pe_target}.eb
                                         if [ \$? -eq 0 ]; then
                                             echo -e "\nBuild of toolchain \$tc SUCCESSFUL\n"
                                         else 
                                             echo -e "\nBuild of toolchain \$tc FAILED\n"
                                         fi
                                     done

                                     # initialise counters and lists
                                     submit_file="\${EASYBUILD_PREFIX}/submit.txt"
                                     > \${submit_file}
                                     unset success
                                     success_file="\${EASYBUILD_PREFIX}/success.txt"
                                     > \${success_file}
                                     unset failed
                                     failed_file="\${EASYBUILD_PREFIX}/failed.txt"
                                     > \${failed_file}

                                     # filename of current production list
                                     list_current=\$(ls $WORKSPACE/jenkins-builds/*${params.pe_current}-${machineLabel} | tail -1)
                                     # filename of target production list (tentative: failed updates will be removed from the target list)
                                     list_target=\${EASYBUILD_PREFIX}/\$(basename \$list_current | sed 's/-${params.pe_current}/-${params.pe_target}/') 
                                     # filter current production list to create the target production list
                                     echo ${params.select_recipes} | tr ' ,' '\n' > select_recipes.txt
                                     if [ -n "${params.discard_recipes}" ]; then 
                                         echo ${params.discard_recipes} | tr ' ,' '\n' > discard_recipes.txt
                                         grep -if select_recipes.txt \${list_current} | grep -ivf discard_recipes.txt | sed -E -e 's/(cpe.*|Cray.*)-${params.pe_current}/\\1-${params.pe_target}/' -e 's#--installpath=.*#--installpath=${eb_installpath}/tools#' > "\$list_target"
                                     else 
                                         grep -if select_recipes.txt \${list_current} | sed -E -e 's/(cpe.*|Cray.*)-${params.pe_current}/\\1-${params.pe_target}/' -e 's#--installpath=.*#--installpath=${eb_installpath}/tools#' > "\$list_target"
                                     fi

                                     if [ -s "\$list_target" ]; then
                                         echo -e "\nFiltering production list \$(basename \${list_current}) to \$(basename \${list_target}): \n\$(cat \${list_target})"
                                     else   
                                         echo -e "\nThe target list of recipes to build is empty. Exiting...\n"
                                         exit 1
                                     fi

                                     # loop over recipes to be updated
                                     while read -r line; do 
                                         status=0
                                         recipe_target=\$(echo \$line | awk '{print \$1}')
                                         flags_target=\$(echo \${line/\$recipe_target/} | xargs)
                                         echo -e "\nCurrent target: \$recipe_target"

                                         # check if recipe matches target Cray PE  
                                         if [[ \$recipe_target =~ (cpe.*|Cray.*)-${params.pe_target} ]]; then
                                             recipe_current=\${recipe_target/${params.pe_target}/${params.pe_current}}

                                             # relative path of dependencies retrieved from full path dry run (--dry-run) of current recipe
                                             deps=\$($build_command --dry-run \$recipe_current | awk '/\\.eb/{printf"%s\\n",gensub(/.*\\/(\\w\\/.*\\.eb).*/,"\\\\1",1)}' | sed -E 's/(cpe.*|Cray.*)-${params.pe_current}/\\1-${params.pe_target}/')

                                             # check status and print short dry run (-D) of target recipe
                                             if [ -n "\$deps" ]; then
                                                 echo -e "\nDry run of \$recipe_target with dependencies:"
                                                 $build_command $pe_flags -D \$recipe_current | grep "\\*\\s\\["
                                             else
                                                 failed+=(\$recipe_target)
                                                 echo "\$recipe_target" >> "\${failed_file}"
                                                 echo -e "\nDry run of \$recipe_target FAILED: removing recipe from production list"
                                                 sed -i "/\$recipe_target/d" \$list_target
                                                 continue
                                             fi

                                             echo -e "\nBuilding with the following command:"
                                             echo "$build_command $pe_flags \$flags_target \$recipe_current"
                                             $build_command $pe_flags \$flags_target \$recipe_current
                                         else
                                             echo -e "\nBuilding with the following command:"
                                             echo "$build_command \$flags_target \$recipe_target"
                                             $build_command \$flags_target \$recipe_target
                                         fi
                                         status=\$[status+\$?]

                                         # keep track of successful and failed builds
                                         if [ \$status -eq 0 ]; then
                                             success+=(\$recipe_target)
                                             echo "\$recipe_target" >> "\${success_file}"
                                             echo "\$deps" | tr ' ' '\n' >> "\${submit_file}"
                                             echo -e "\nBuild of \$recipe_target SUCCESSFUL(\${#success[@]})\n"

                                             # adjust access rights of licensed software
                                             for name in $licensed_software; do 
                                                 if [[ "\$recipe_target" =~ "\$name" ]]; then 
                                                     version=\$(echo "\$recipe_target" | sed -e "s/^\${name}-//" -e "s/.eb//")
                                                     echo -e "Adjusting permissions of licensed software \$name (module version: \$version):"; 
                                                     # define allowed group
                                                     if [[ "\$name" =~ "IDL" ]]; then
                                                         # check IDL module version
                                                         if [[ "\$version" =~ "CSCS" ]]; then
                                                             group="\${name,,}cscs"
                                                         else
                                                             group="\${name,,}ethz"
                                                         fi
                                                     elif [[ "\$name" =~ "VASP" ]]; then
                                                         # check VASP module version
                                                         if [[ "\$version" =~ "5.4" ]]; then
                                                             group="\${name,,}"
                                                         else
                                                             # group vasp6 enforced after June 30th 2020"
                                                             group="\${name,,}6"
                                                         fi
                                                     else
                                                         group=\${name,,}
                                                     fi

                                                     # check group ownership of licensed software folder
                                                     checkgroup=\$(stat -c "%G" \${EASYBUILD_INSTALLPATH}/software/\${name}/\${version})
                                                     if [ "\$checkgroup" != "\$group" ]; then
                                                     # change group ownership (current user must be member of the group to use chgrp)
                                                         echo -e " \t- changing group ownership of the folder \${EASYBUILD_INSTALLPATH}/software/\${name}/\${version} to \${group}"
                                                         chgrp \${group} -R \${EASYBUILD_INSTALLPATH}/software/\${name}/\${version}
                                                     fi
                                                     # check access rights of licensed software folder: last digit must be 0 (no access for others)
                                                     checkrights=\$(stat -c "%a" \${EASYBUILD_INSTALLPATH}/software/\${name}/\${version})
                                                     if [ \${checkrights: -1} -ne 0 ]; then
                                                         # change access rights (current user must own the folder to use the command chmod)
                                                         echo -e " \t- removing access rights to folder \${EASYBUILD_INSTALLPATH}/software/\${name}/\${version} for others"
                                                         chmod -R o-rwx \${EASYBUILD_INSTALLPATH}/software/\${name}/\${version}
                                                     fi
                                                 fi
                                             done
                                         else
                                             failed+=(\$recipe_target)
                                             echo "\$recipe_target" >> "\${failed_file}"
                                             echo -e "\nBuild of \$recipe_target FAILED(\${#failed[@]}): removing recipe from production list\n"
                                             sed -i "/\$recipe_target/d" \$list_target
                                         fi

                                     done < \$list_target

                                     # change permission of tmp folders if failed is not null
                                     if [ -n "\$failed" ]; then
                                         chmod -R +r "\${EASYBUILD_TMPDIR}"
                                         find "\${EASYBUILD_TMPDIR}" -type d -exec chmod +x '{}' \\;
                                     fi

                                     # print successful and failed updates
                                     echo -e "\nSuccessful Updates: \${#success[@]} \n\${success[@]}"
                                     echo -e "\nFailed Updates: \${#failed[@]} \n\${failed[@]}"

                                     # return the number of failed updates
                                     exit \${#failed[@]}
                                 """)
                    }
                }
            }
        }
    }

    try {
        parallel updates
        currentBuild.result = "SUCCESS"
    } catch(err) {
        if (err.toString().contains('exit code 143')) {
            currentBuild.result = "ABORTED"
            println "The Build step was cancelled. Aborting..."
        }
        else if (err.toString().contains('Queue task was cancelled')) {
            currentBuild.result = "ABORTED"
            println "The Queue task was cancelled. Aborting..."
        }
        else {
            currentBuild.result = "FAILURE"
            println "The Build step failed. Exiting..."
        }
    }
}

/*
 Jira Stage: create Jira issues for failed updates on the different "machinesLabel"
 Loop over all systems in "machineConfigurations":
  - retrieve path to file with failed recipes ("failed.txt")
  - loop over the lines of the file "failed.txt" (list of failed updates)
  - create a Jira Issue for each item in the list with project key "params.jira_project"
*/
JiraIssues = [:]
stage('Jira Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def machineName = machine.name
        for (item in architectures) {
            def architecture = item
            def machineLabel = architecture == "" ? 
                machineName : 
                "${machineName}-${architecture}"
            JiraIssues[machineLabel] = {
                node(machineName) {

                    /* 
                       define machine dependent environment variable:
                       - eb_installpath: EasyBuild installpath
                    */
                    def eb_installpath
                    if(machineName == "daint" || machineName == "dom"){
                        eb_installpath = "${params.eb_prefix}/${params.pe_target}/${machineLabel}"
                    } else if(machineName == "eiger" || machineName == "pilatus"){
                        eb_installpath = "${params.eb_prefix}"
                    }

                    println "\nEasyBuild installpath: ${eb_installpath}\n"

                    /* issue = [key, status] of Jira issues matching search */
                    def String[] issue

                    /* retrieve list of successful  updates */
                    def success_updates = sh(returnStdout: true,
                                        script: """#!/bin/bash -l
                                        success_file="${eb_installpath}/success.txt"
                                        if [ -s "\$success_file" ]; then
                                            cat \$success_file
                                        fi""").trim()  
                    if ( !success_updates?.trim() ) {
                        println "\nSuccessful updates: None\n"
                    }
                    else {
                        success_updates.tokenize(' \n').each {
                            /* search existing Jira issues for current successful update */
                            try {
                                issue = methods.searchJiraIssue(it, machineLabel, params.pe_target, params.jira_project)
                                if(issue){
                                    if(issue[1]!='Done'){
                                        methods.commentJiraIssue("Update of $it successful on $machineLabel with PE $params.pe_target", issue[0])
                                        // Transition ID: 11 means 'In Progress', 21 means 'To Do', 31 means 'Done'
                                        jiraTransitionIssue idOrKey: issue[0], input: [transition:[id:'31']], site: 'JIRA_SITE'
                                    }
                                } else println "No issue matching $it on $machineLabel with PE $params.pe_target"
                            } catch(err) {
                                println "Failed to update Jira issues for $it"
                            }
                        }
                    }

                    /* retrieve list of failed updates */
                    def failed_updates = sh(returnStdout: true,
                                        script: """#!/bin/bash -l
                                        failed_file="${eb_installpath}/failed.txt"
                                        if [ -s "\$failed_file" ]; then
                                            cat \$failed_file
                                        fi""").trim()  
                    if ( !failed_updates?.trim() ) {
                        println "\nFailed updates: None\n"
                    }
                    else {
                        failed_updates.tokenize(' \n').each {
                            /* search existing Jira issues for current failed update */
                            try {
                                issue = methods.searchJiraIssue(it, machineLabel, params.pe_target, params.jira_project)
                                if(issue){
                                    methods.commentJiraIssue("Update of $it failed on $machineLabel with PE $params.pe_target", issue[0])
                                    // Transition ID: 11 means 'In Progress', 21 means 'To Do', 31 means 'Done'
                                    if(issue[1]=='Done') jiraTransitionIssue idOrKey: issue[0], input: [transition:[id:'21']], site: 'JIRA_SITE'
                                } else {
                                    /* create new Jira issue for current failed update */
                                    try {
                                        methods.createJiraIssue('Task', machineLabel, "$it failed with $params.pe_target", "EasyBuild recipe $it failed with PE $params.pe_target: logs at Build URL", 'High', params.jira_project)
                                    } catch(err) {
                                        println "Failed to create Jira Issue for $it"
                                    }
                                }
                            } catch(err) {    
                                println "Failed to update Jira issues for $it"
                            }
                       }
                    }
                }
            }
        }
    }

    if (params.createJira) {
        try {
            parallel JiraIssues
        } catch(err) {
            println "Failed to create Jira Issues"
        }
    }  
}

/*
 GitHub Stage: submit a pull request for successful updates on the "machinesLabel"
 Loop over all systems in "machineConfigurations":
  - retrieve path to file with recipes to submit on GitHub ("submit.txt") and target production list
  - loop over the lines of the file "submit.txt" (successful updates and dependencies with relative path
  - submit a pull request on GitHub using the hub tool with "WIP [$machineLabel]" in the title
*/
GitHubPR = [:]
stage('GitHub Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def machineName = machine.name
        for (item in architectures) {
            def architecture = item
            def machineLabel = architecture == "" ? 
                machineName : 
                "${machineName}-${architecture}"
            GitHubPR[machineLabel] = {
                node(machineName) {

                    /* 
                       define machine dependent environment variable:
                       - eb_installpath: EasyBuild installpath
                       - load_hub: command to load hub module
                    */
                    def eb_installpath
                    if(machineName == "daint" || machineName == "dom"){
                        eb_installpath = "${params.eb_prefix}/${params.pe_target}/$machineLabel"
                        load_hub = architecture == "" ?
                            "module load hub" :
                            "module load daint-$architecture hub"
                    } else if(machineName == "eiger" || machineName == "pilatus"){
                        eb_installpath = "${params.eb_prefix}"
                        load_hub = "module load hub"
                    }

                    println "\nEasyBuild installpath: ${eb_installpath}\n"

                    /* retrieve list of successful updates and target production list to submit pull request */
                    sh("""#!/bin/bash -l

                        failed_file="${eb_installpath}/failed.txt"
                        submit_file="${eb_installpath}/submit.txt"
                        # check if submit file is not empty
                        if [ -s "\$submit_file" ]; then
                            submit_list=\$(cat \$submit_file | sort | uniq)
                            echo -e "List of items to submit from \$submit_file: \n\$submit_list"
                        else
                            echo -e "The list of items to submit from \$submit_file is empty. Exiting..."
                            exit
                        fi

                        # define repository
                        repo="git@github.com:eth-cscs/production.git"
                        # define submit folder 
                        submit_folder="${WORKSPACE}/submit"
                        
                        # clone master over ssh to submit_folder
                        echo -e "\nCloning CSCS GitHub production repository to \$submit_folder:"
                        echo "git clone --quiet \$repo \$submit_folder"
                        git clone --quiet \$repo \$submit_folder
                        
                        # go to submit folder to checkout branch and match relative path of deps
                        echo -e "\nGo to folder \$submit_folder/easybuild/easyconfigs"
                        pushd \$submit_folder/easybuild/easyconfigs
                        
                        # create git branch or update it if existing
                        branch="${machineLabel}/${params.pe_target}" 
                        if [ -n "\$(git ls-remote --heads \$repo \$branch)" ]; then
                            git checkout \$branch 
                        else 
                            git checkout -b \$branch
                        fi

                        # initialise variables
                        unset copied
                        unset missing

                        # loop over list of successful updates and dependencies
                        echo -e "\nCopy successful updates and dependencies for commit:"
                        for item in \$submit_list; do
                            # EasyBuild file name of current update
                            recipe=\$(basename \$item)
                            # check if current update did not fail elsewhere
                            if fgrep -H \$recipe \$failed_file; then
                                echo -e " \t \$recipe found in failed list \$failed_file (skipped)"
                            else
                                # check if recipe matches Cray PE
                                if [[ \$recipe =~ (cpe.*|Cray.*)-${params.pe_target} ]]; then
                                    name=\$(expr "\$item" : "./\\(.*\\)/.*")
                                    version=\$(expr "\$item" : "./\$name/\$name-\\(.*\\).eb")
                                    source=${eb_installpath}/software/\$name/\$version/easybuild/\$recipe
                                    if [ -n "\$source" ]; then 
                                        echo -e " \t \$source -> \$item"
                                        cp \$source \$item
                                        # update variable
                                        copied+=(\$recipe)
                                    else
                                        echo -e " \t \$recipe not copied (update not found)"
                                        # update variable
                                        missing+=(\$recipe)
                                    fi
                                else
                                    echo -e " \t \$recipe does not match ${params.pe_target} (skipped)"
                                fi
                            fi
                        done

                        # add recipes under current path "\$submit_folder/easybuild/easyconfig"
                        git add .

                        # update production list
                        list_target=\$(ls ${eb_installpath}/*${params.pe_target}-${machineLabel} | tail -1)
                        list_production=\$submit_folder/jenkins-builds/\$(basename \$list_target)
                        list_append=${eb_installpath}/\$(basename \$list_target).append
                        if [ -s "\$list_production" ]; then
                            # copy updated items of target list to file list_append
                            grep -v -f \$list_production \$list_target > \$list_append
                            # updated items of target list are appended to production list
                            if [ -s "\$list_append" ]; then
                                echo -e "\nAppending \$list_append to \$list_production"
                                cat \$list_append >> \$list_production
                            else
                                echo -e "\nNothing to append to \$list_production"
                            fi
                        else
                            # target list is copied to production list
                            echo -e "\nCopying \$list_target -> \$list_production"
                            cp \$list_target \$list_production
                        fi

                        # add production list
                        git add \$list_production

                        # update architecture modulefile
                        if [[ ${machineName} == "daint" || ${machineName} == "dom" ]]; then
                            modulefile_current="${WORKSPACE}/login/daint-${architecture}/${params.pe_current}"
                            if [ -s \$modulefile_current ]; then
                                modulefile_target="\$submit_folder/login/daint-$architecture/${params.pe_target}"
                                if [ ! -f "\$modulefile_target" ]; then  
                                    sed "s/${params.pe_current}/${params.pe_target}/" \$modulefile_current > \$modulefile_target
                                    # add architecture modulefile
                                    git add \$modulefile_target
                                fi
                            fi
                        fi

                        # load hub tool to submit a pull request with recently added files
                        ${load_hub}
                        # check if there is anything to commit
                        if [ -n "\$(git status --porcelain)" ]; then
                            echo -e "\nCommit successul updates:"
                            git commit -m "Updated recipes on ${machineLabel} for PE ${params.pe_target}"
                            # check if a pull request from selected branch is already open
                            if [ -n "\$(hub pr list --head \${branch})" ]; then
                                git push origin HEAD
                            else
                                hub pull-request -p -m "WIP [${machineLabel}] Updated recipes for PE ${params.pe_target}"
                            fi
                        else 
                            echo -e "\nNothing to commit"
                        fi

                        # print copied and missing updates
                        echo -e "\nCopied updates: \${#copied[@]} \n\${copied[@]}"
                        echo -e "\nMissing updates: \${#missing[@]} \n\${missing[@]}"

                        # return the number of missing updates
                        exit \${#missing[@]}
                    """)
                }
            }
        }
    }

    if (params.submitPR) {
        try {
            parallel GitHubPR
        } catch(err) {
            println "Failed to submit GitHub pull request"
        }
    }  
}

if (params.notifySlack) {
    methods.notifySlackFinish()
}
