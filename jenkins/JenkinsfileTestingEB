#!/usr/bin/env groovy

def methods
def machinesList
def isForTesting = params.test
def pullRequestMessage = env.test ? params.customMessage : env.ghprbPullTitle
stage('Initialization') {
    node('master') {
        checkout scm
        def rootDir = pwd()
        methods = load("${rootDir}/jenkins/util.groovy")
        machinesList = load("${rootDir}/jenkins/Machines.groovy") 
        if (methods.checkWorkInProgress(pullRequestMessage)) {
            echo "Work in progress detected, aborting....."
            currentBuild.result = 'ABORTED'
            return
        }
    }
}

if (currentBuild.result == 'ABORTED')
    return
def machineConfigurations = [] 
stage('Machine Selection') {
    node('master') {    
        def machinesToRun = machinesList.findAll({methods.machineCheck(pullRequestMessage, it.name)})
        if (!machinesToRun) {
            echo "No machines to run, aborting....."
            currentBuild.result = 'ABORTED'
            return
        }
        for (mach in machinesToRun) {
            machineConfigurations.add(
                [machine:mach, architectures: methods.getMachineConfiguration(
                        pullRequestMessage, mach.name, mach.archs as String[])])
        }
    }
}

if (currentBuild.result == 'ABORTED')
    return   
def builds = [:]
stage('Build Stage') {
    for (mach in machineConfigurations) {
        def machine = mach.machine
        def architectures = mach.architectures
        def machineName = machine.name 
        for (architecture in architectures) {       
            def arch = architecture
            def machineLabel = arch == "" ? machineName : "${machineName}-${arch}"
            builds[machineLabel] = {
                node(machineName) {
                    def scmVars = checkout scm
                    println "Machine name: ${machineName}"
                    def projectName = env.JOB_BASE_NAME.trim() 
                    def gitCommit = scmVars.GIT_COMMIT.trim()[0..6]
                    def workingDir = sh(returnStdout: true, 
                                         script: 'echo $PWD').trim()
                    def scratch = sh(returnStdout: true, 
                                     script: 'echo $SCRATCH').trim()
                    def prefix = "$scratch/$projectName/$machineLabel/$gitCommit"
                    def command = machineName == 'dom' ? "srun -u --constraint=ARCH --job-name=${projectName} --time=06:00:00" : '' 
                    def commandComplete = "$command $workingDir/jenkins-builds/production.sh --force=\"\$buildlist\" --list=$prefix/${projectName}.txt --prefix=$prefix"
                    if (arch)
                        commandComplete = "$command/$arch $workingDir/jenkins-builds/production.sh --arch=$arch --force=\"\$buildlist\" --list=$prefix/${projectName}.txt --prefix=$prefix --xalt=no"
                    println "Command: $commandComplete"
                    def buildList = sh(returnStdout: true,
                                    script: "echo \$(git diff origin/master..HEAD --name-only --oneline --no-merges --diff-filter=ACMRTUXB |grep ^easybuild.*\\.eb\\\$ |awk '{print \"basename \"\$0}'|sh)").trim()
                    println "Build list: $buildList"
                    withEnv(["EASYBUILD_TMPDIR=$prefix/sources",
                             "EASYBUILD_SOURCEPATH=$prefix/sources",
                             "EB_CUSTOM_REPOSITORY=$workingDir/easybuild",
                             "buildlist=$buildList"]) {
                                 sh("""status=0
                                       if [ -d $prefix ]; then
                                           rm -rf $prefix/*
                                       fi
                                       
                                       echo -e "\\n Current diff list by 'git diff origin/master..HEAD --name-only --oneline --no-merges --diff-filter=ACMRTUXB':"
                                       git diff origin/master..HEAD --name-only --oneline --no-merges --diff-filter=ACMRTUXB
                                       # if buildlist is empty, skip this build; otherwise, write .eb files to file
                                       if [ -z \"\$buildlist\" ]; then
                                           echo -e "\\n No EasyBuild recipe to build, skipping build \\n\"
                                           exit 0
                                       else
                                           echo \$buildlist | tr \" \" \"\\n\" > \"$prefix/${projectName}.txt\"
                                       fi

                                       #$commandComplete
                                       status=\$[status+\$?]
                                       chmod -R o+r \$EASYBUILD_TMPDIR
                                       find \$EASYBUILD_TMPDIR -type d -exec chmod o+x '{}' \\;
                                       exit \$status""") 
                    }
                    deleteDir()
                }
            }
        }
    }
    parallel builds
}
