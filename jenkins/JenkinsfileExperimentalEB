#!/usr/bin/env groovy

def methods
def machinesList
/*
 Initialization: checkout the production repository to load the files:
 - "util.groovy" with the functions used in the pipeline scripts
 - "Machines.groovy" with the list and properties of HPC systems
*/
stage('Initialization') {
    node('master') {
        checkout scm
        methods = load("$WORKSPACE/jenkins/util.groovy")
        machinesList = load("$WORKSPACE/jenkins/Machines.groovy")
    }
}

/*
 Machine Selection:
 - filters the user defined parameter "machines", accessible though "params.machines"
 - defines the runtime HPC systems of the project "machinesToRun"
 - defines the configuration of the runtime HPC systems "machinesConfiguration"
*/
def machineConfigurations = []
stage('Machine Selection') {
    node('master') {
        def machinesToRun = machinesList.findAll({methods.machineCheck(params.machines, it.name)})
        if (!machinesToRun) {
            println "No machines were specified. Aborting...."
            currentBuild.result = "FAILURE"
            return
        }
        for (system in machinesToRun) {
            machineConfigurations.add(
                [machine:system, architectures: methods.getMachineConfiguration(
                        params.machines, system.name, system.archs as String[])])
        }
    }
}

/*
 Build Stage: configures parallel builds for the different "machinesToRun"
 Loop over all systems in "machineConfigurations":
  - if the machine has multiple architectures, starts a sub-loop over architectures
  - the user parameter "eb_prefix" is prepended to the variable EASYBUILD_PREFIX
  - EBVERSIONEASYBUILD stores the version of EasyBuild ("params.eb_version")
  - the target CDT version is selected by the user and stored in "params.cdt_version"
*/
def builds = [:]
stage('Build Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def machineName = machine.name
        for (item in architectures) {
            /* define architecture and machineLabel
               to use them in parallel builds */
            def architecture = item
            def machineLabel = architecture == "" ?
               machineName :
               "$machineName-$architecture"
            builds["$machineLabel"] = {
                node(machineName) {
                    checkout scm

                    /* define command to load EasyBuild */
                    def load_easybuild = architecture == "" ?
                        "module load cdt/${params.cdt_version} EasyBuild-custom/cscs" :
                        "module load cdt/${params.cdt_version} daint-$architecture EasyBuild-custom/cscs"

                    /* define command to switch EasyBuild version*/
                    def switch_easybuild = params.eb_version == "" ?
                        "" :
                        "module switch EasyBuild EasyBuild/${params.eb_version}"

                    /* define unuse command */
                    def unuse_command = architecture == '' ?
                        "module unuse $machine.unusePath" :
                        "module unuse $machine.unusePath".replace('ARCH', architecture)
                        println("Unuse command: $unuse_command")

                    /* define toolchain names and corresponding EasyBuild recipes */
                    def toolchains = ['CrayCCE', 'CrayGNU', 'CrayIntel', 'CrayPGI']
                    def current_tc = toolchains.collect{"$it-${params.cdt_current}.eb"}.join(' ')
                    println "Current toolchains: $current_tc"

                    /* define toolchain flags and command to build toolchains */
                    def tc_flags = "--hidden --ignore-locks --try-software-version=${params.cdt_version}"
                    def build_toolchains = architecture == "" ?
                        "srun -u -J $env.JOB_BASE_NAME --account=${params.account} -t 00:05:00 eb $current_tc $tc_flags" :
                        "srun -u -C $architecture -J $env.JOB_BASE_NAME --account=${params.account} -t 00:05:00 eb $current_tc $tc_flags"

                    /* build toolchains */
                    sh("""#!/bin/bash -l
                        export EASYBUILD_PREFIX="${params.eb_prefix}/$machineLabel/${params.cdt_version}"
                        export EASYBUILD_TMPDIR="\$EASYBUILD_PREFIX/tmp"
                        export EASYBUILD_BUILDPATH="/tmp/$env.BUILD_TAG"
                        export EB_CUSTOM_REPOSITORY="$WORKSPACE/easybuild"
                        $load_easybuild
                        $switch_easybuild
                        $unuse_command
                        export EASYBUILD_EXTERNAL_MODULES_METADATA=$WORKSPACE/easybuild/cray_external_modules_metadata-${params.cdt_version}.cfg

                        # print EasyBuild version and configuration
                        eb --version
                        eb --show-config

                        # build toolchains
                        status=0
                        $build_toolchains
                        status=\$[status+\$?]

                        exit \$status""")

                    /* copy newly created toolchains to workspace */
                    for (toolchain in toolchains) {
                        def source = "${params.eb_prefix}/$machineLabel/${params.cdt_version}/software/${toolchain}/${params.cdt_version}/easybuild/${toolchain}-${params.cdt_version}.eb"
                        def target = "$WORKSPACE/easybuild/easyconfigs/c/$toolchain"
                        sh "cp ${source} ${target} || true"
                    }

                    /* define software flags and command to build software */
                    def sw_flags = "--ignore-locks --try-toolchain-version=${params.cdt_version} -r"
                    def build_command = architecture == "" ?
                        "srun -u -J $env.JOB_BASE_NAME --account=${params.account} -t 06:00:00 eb $sw_flags" :
                        "srun -u -C $architecture -J $env.JOB_BASE_NAME --account=${params.account} -t 06:00:00 eb $sw_flags"

                    /* build the software stack with the new toolchains */
                    //def prod_file = "7.0.UP02-${params.cdt_version}-$machineLabel"

                    sh("""#!/bin/bash -l
                        export EASYBUILD_PREFIX="${params.eb_prefix}/$machineLabel/${params.cdt_version}"
                        export EASYBUILD_TMPDIR="\$EASYBUILD_PREFIX/tmp"
                        export EASYBUILD_BUILDPATH="/tmp/$env.BUILD_TAG"
                        export EB_CUSTOM_REPOSITORY="$WORKSPACE/easybuild"
                        $load_easybuild
                        $switch_easybuild
                        $unuse_command
                        echo -e "\nMODULEPATH: $MODULEPATH\n"
                        export EASYBUILD_EXTERNAL_MODULES_METADATA="$WORKSPACE/easybuild/cray_external_modules_metadata-${params.cdt_version}.cfg"

                        # print EasyBuild version and configuration
                        eb --version
                        eb --show-config

                        # initialise counters and lists
                        unset success
                        success_file="\${EASYBUILD_PREFIX}/success.txt"
                        echo "" > \${success_file}
                        unset failed
                        failed_file="\${EASYBUILD_PREFIX}/failed.txt"
                        echo "" > \${failed_file}

                        # filter the target production list $machineLabel
                        echo ${params.select_recipes} | tr " ," "\n" > select_recipes.txt
                        echo ${params.discard_recipes} | tr " ," "\n" > discard_recipes.txt
                        build_list=\$(grep -if select_recipes.txt $WORKSPACE/jenkins-builds/$machineLabel | grep -ivf discard_recipes.txt | awk '{print \$1}')
                        
                        if [ -z "\$build_list" ]; then
                         echo -e "\nThe list of recipes to build is empty. Exiting..."
                         exit \$(wc -w <<< \$build_list)
                        else   
                         echo -e "\nSelected recipes to build: \n\$build_list" | sed 's/${params.cdt_current}/${params.cdt_version}/'
                        fi

                        # build recipes
                        for recipe in \${build_list}; do
                            status=0
                            echo -e "\nBuilding \$(echo \$recipe | sed 's/${params.cdt_current}/${params.cdt_version}/')"
                            eb \$recipe --try-toolchain-version=${params.cdt_version} -Dr 2>&1 | grep -iv "== temporary"

                            echo -e "\nSubmitting job and building..."
                            $build_command \$recipe
                            
                            status=\$[status+\$?]

                            # keep track of successful and failed builds
                            if [ \$status -eq 0 ]; then
                                success+=(\$recipe)
                                echo "\$recipe" >> "\${success_file}"
                                # remove folders
                                echo -e "\nBuild of \$recipe SUCCESSFUL"
                            else
                                failed+=(\$recipe)
                                echo "\$recipe" >> "\${failed_file}"
                                # archive folders
                                echo -e "\nBuild of \$recipe FAILED"
                            fi
                        done

                        # change permission of tmp folders if failed is not null
                        if [ -n "\$failed" ]; then
                            chmod -R o+r "\${EASYBUILD_TMPDIR}"
                            find "\${EASYBUILD_TMPDIR}" -type d -exec chmod o+x '{}' \\;
                        fi

                        # print successful and failed builds
                        echo -e "\nSuccessful Builds: \${#success[@]} \n\${success[@]}"
                        echo -e "\nFailed Builds: \${#failed[@]} \n\${failed[@]}"

                        # return the number of failed Builds
                        exit \${#failed[@]}
                    """)
                }
            }
        }
    }

    try {
        parallel builds

        //// merge workspaces and create PR's
        //node('dom') {
        //    sh("""#!/bin/bash -l
        //        git -C $WORKSPACE status

        //        cp -rf \$SCRATCH/*/workspace/ExperimentalEB*/* $WORKSPACE
        //        rm $WORKSPACE/*.out
        //        git -C $WORKSPACE status
        //        git -C $WORKSPACE --no-pager diff --stat
        //        echo \$SCRATCH/*/workspace/ExperimentalEB*/ | sed 's@ @\\n@g'

        //        echo $WORKSPACE
        //        echo $SCRATCH
        //        pwd

        //        wc $SCRATCH/$env.JOB_BASE_NAME-*-failed.log
        //        head $SCRATCH/$env.JOB_BASE_NAME-*-failed.log | sed 's@ @\\n@g'
        //        wc $SCRATCH/$env.JOB_BASE_NAME-*-success.log
        //        head $SCRATCH/$env.JOB_BASE_NAME-*-success.log | sed 's@ @\\n@g'
        //        # TO DO: add successful recipes to GitHub PR
        //        # TO DO: open Jira issue or GitHub WIP PR with failed recipes
        //    """)
        //}
        currentBuild.result = "SUCCESS"
    } catch(err) {
        if (err.toString().contains('exit code 143')) {
            currentBuild.result = "ABORTED"
            println "The Build step was cancelled. Aborting..."
        }
        else if (err.toString().contains('Queue task was cancelled')) {
            currentBuild.result = "ABORTED"
            println "The Queue task was cancelled. Aborting..."
        }
        else {
            currentBuild.result = "FAILURE"
            println "The Build step failed. Exiting..."
        }
    }
}

/* Needed in preparation of the GitHub pull request */
//#/*
//#                                new_eb=\$(echo \$recipe | sed -E 's/(Cray.+)-${params.cdt_current}/\\1-${params.cdt_version}/')
//#                                new_path=\$(echo \$new_eb | sed -E 's@-(.*)\\.eb@/\\1@')
//#                                ls -lh ${params.eb_prefix}/$machineLabel/${params.cdt_version}/software/\$new_path/easybuild/reprod/\$new_eb
//#                                find $WORKSPACE -name \$recipe | xargs dirname | xargs cp ${params.eb_prefix}/$machineLabel/${params.cdt_version}/software/\$new_path/easybuild/reprod/\$new_eb
//#                                echo \$new_eb >> $WORKSPACE/jenkins-builds/$prod_file
//#                        done
//#
//#                        echo original: $WORKSPACE/jenkins-builds/$prod_file
//#                        cat $WORKSPACE/jenkins-builds/$prod_file
//#
//#
//#                        rm $WORKSPACE/*.out
//#
//#                        chmod a+r -R $SCRATCH/ExperimentalEB/
//#                        git -C $WORKSPACE status
//#
//#                        echo $WORKSPACE
//#                        echo $SCRATCH
//#*/

// alternative creation of toolchains without --try-...
//#                        tcdir=\$(find . -type f -name "Cray*-${params.cdt_current}.eb" -execdir pwd ';')
//#                        for dir in \$tcdir; do
//#                         tcname=\$(basename \$dir) 
//#                         sed 's/${params.cdt_current}/${params.cdt_version}/' \$dir/\$tcname-${params.cdt_current}.eb > \$dir/\$tcname-${params.cdt_version}.eb 
//#                         eb \$tcname-${params.cdt_version}.eb --hidden
//#                        done
