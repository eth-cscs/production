#!/usr/bin/env groovy

def methods
def machinesList
def loginBash = '#!/bin/bash -l'
stage('Initialization') {
    node('master') {
        checkout scm
        def rootDir = pwd()
        methods = load("${rootDir}/jenkins/util.groovy")
        machinesList = load("${rootDir}/jenkins/Machines.groovy")
    }
}

def userMessage = params.customMessage
def machineConfigurations = []
stage('Machine Selection') {
    node('master') {
        def machinesToRun = machinesList.findAll({methods.machineCheck(userMessage, it.name)})
        if (!machinesToRun) {
            println "No machines were specified. Aborting...."
            currentBuild.result = "FAILURE"
            return
        }
        for (mach in machinesToRun) {
            machineConfigurations.add(
                [machine:mach, architectures: methods.getMachineConfiguration(
                        userMessage, mach.name, mach.archs as String[])])
        }
    }
}

def builds = [:]
stage('Build Stage') {
    for (mach in machineConfigurations) {
        def machine = mach.machine
        def architectures = mach.architectures
        def machineName = machine.name
        for (architecture in architectures) {
            def arch = architecture
            def machineLabel = arch == "" ? machineName : "${machineName}-${arch}"
            builds[machineLabel] = {
                node(machineName) {
                    checkout scm
                    def moduleDefinition = ''
                    if (machineName == 'leone')
                        moduleDefinition = '''module() { eval `/usr/bin/modulecmd bash $*`; }
                                              export -f module'''

                    def project_name = env.JOB_BASE_NAME.trim()
                    def workingDir = sh(returnStdout: true,
                                         script: 'echo $PWD').trim()
                    def scratch = sh(returnStdout: true,
                                     script: """$loginBash
                                                echo \$SCRATCH""").trim()
                    def prefix = "$scratch/$project_name/$machineLabel"
                    def unuseFlag
                    if (machine.unusePath != '') {
                        println("The unuse path is: $machine.unusePath")
                        unuseFlag = arch == '' ?  "--unuse=${machine.unusePath}" : "--unuse=${machine.unusePath}".replace('ARCH', arch)
                    }
                    else {
                        println("The unuse path is empty")
                        unuseFlag = ''
                    }
                    def listFlag = "--list=$workingDir/jenkins-builds/$machineLabel"
                    def command = "$workingDir/jenkins-builds/production.sh $listFlag --prefix=$prefix $unuseFlag"
                    if (arch != '')
                        command = "srun -u --constraint=$arch --job-name=$project_name --time=24:00:00 $workingDir/jenkins-builds/production.sh --arch=$arch $listFlag --prefix=$prefix $unuseFlag --xalt=no"
                    withEnv(["EASYBUILD_TMPDIR=$prefix/sources"]) {
                                 sh("""$loginBash
                                       $moduleDefinition
                                       status=0
                                       if [ -d $prefix ]; then
                                           rm -rf $prefix/*
                                       fi
                                       $command
                                       status=\$[status+\$?]
                                       if [ -d \"\$EASYBUILD_TMPDIR\" ]; then
                                        chmod -R o+r \$EASYBUILD_TMPDIR
                                        find \$EASYBUILD_TMPDIR -type d -exec chmod o+x '{}' \\;
                                       fi
                                       exit \$status""")
                    }
                }
            }
        }
    }

    try {
        parallel builds
        currentBuild.result = "SUCCESS"
    } catch(err) {
        if (err.toString().contains('exit code 143')) {
            currentBuild.result = "ABORTED"
            println "The Build step was cancelled. Aborting....."
        }
        else if (err.toString().contains('Queue task was cancelled')) {
            currentBuild.result = "ABORTED"
            println "The Queue task was cancelled. Aborting....."
        }
        else {
            currentBuild.result = "FAILURE"
            println "The Build step failed. Exiting....."
        }
    }

    methods.notifySlackFinish()
}
